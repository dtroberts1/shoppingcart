package com.enterprisesim.view;

import java.awt.BorderLayout;  
import java.awt.GridLayout; 

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import com.enterprisesim.*;

import com.enterprisesim.model.MyModel;

import com.enterprisesim.Listeners.MyListeners;


public class GUIView {
	
	public static class BookData{
		public int bookID;
		public String bookTitleAndAuth;
		public double bookPrice;
	}
	
	public static MyModel model;
	static JFrame myFrame;
	static JButton processBtn;
	static JButton confirmBtn;
	static JButton viewOrderBtn;
	static JButton finishOrderBtn;
	private JButton newOrderBtn;
	private JButton exitBtn;
	
	private JLabel nbrItemsLabel;
	private JLabel bookIDLabel ;
	private JLabel qtyLabel;
	private JLabel itemInfoLabel;
	private JLabel itemSubtotalLabel;
	
	public static JTextField nbrItemsTxt;
	private JTextField bookIDTxt; 
	private JTextField qtyTxt; 
	private JTextField itemsInfoTxt; 
	private JTextField itemSubtotalTxt; 

    JPanel upperPane;
    JPanel inputPane;
    JPanel labelPane;
    
	public static class TransactionItem extends BookData{
		//public int itemNbr;
		public int qty;
		public double discountPercent;
		public double subTotal;

	}
	
	public static class Order{
		int size;
		int nbrOrderItems;
		double orderSubtotal;
		final double taxRate = .06;
		double taxAmount;
		double orderTotal;
		
		String transactionDate;
		TransactionItem allTransactions[];
		//private ArrayList<BookData> allBooks;
		public Order(int nbrOrderItems) {
			
			this.size = 0;
			this.orderSubtotal = 0.00;
			allTransactions = new TransactionItem[nbrOrderItems];
		//	this.allBooks = new ArrayList<BookData>(size);
			/*
			for (int i = 0; i < size; i ++) {
				allTransactions[i] = new TransactionItem();
			}
			*/
		}
		public void addItem(BookData bookData, int quantity, String bookTitleAndAuth) {
			int itemIndex = this.size++;
			this.allTransactions[itemIndex] = new TransactionItem();
			this.allTransactions[itemIndex].bookID = bookData.bookID;
			this.allTransactions[itemIndex].bookTitleAndAuth = bookData.bookTitleAndAuth;
			this.allTransactions[itemIndex].bookPrice = bookData.bookPrice;
			this.allTransactions[itemIndex].qty = quantity;
			//this.allTransactions[itemIndex].info = bookTitleAndAuth;
			this.allTransactions[itemIndex].subTotal = (quantity * bookData.bookPrice) * MyModel.getDiscount(quantity);
			this.orderSubtotal = 0;////////////////////////////////;fill this out/////////////////////////
		}
	}
	
	public GUIView() {
		
		MyModel.isProcessed = true;
		initializeGUI(model);
	}
	public static void reset() {
		MyModel.currentItemNbr = 0;
		MyModel.maxItems = 0;
		MyModel.isProcessed = true;
		processBtn.setEnabled(true);
		confirmBtn.setEnabled(false);
		viewOrderBtn.setEnabled(false);
		finishOrderBtn.setEnabled(false);
	}
	public static void update() {
		MyModel.setNbrItems(nbrItemsTxt);

		processBtn.setText("Process Item #" + MyModel.currentItemNbr);
		confirmBtn.setText("Confirm Item #" + MyModel.currentItemNbr);
		if (MyModel.currentItemNbr < MyModel.maxItems)
		{
			if (MyModel.isProcessed == true)
			{
				// If new item is processed
				System.out.println("isProcessed is true, setting process enabled to false");
				processBtn.setEnabled(false);
				confirmBtn.setEnabled(true);
				
				MyModel.isProcessed = false;
				
			}
			// If new item is confirmed
			else if (MyModel.isProcessed == false) {
				
				//=========== Verify valid item
				
				//===========
				
				MyModel.processItem();
				
				System.out.println("isProcessed is false, setting process enabled to true");

				System.out.println("Conditional is false");
				if (MyModel.currentItemNbr < MyModel.maxItems) // if the last confirmed item isn't the last
					processBtn.setEnabled(true);
				else {
					// Enable the other buttons
					viewOrderBtn.setEnabled(true);
					finishOrderBtn.setEnabled(true);
				}
				confirmBtn.setEnabled(false);
				MyModel.isProcessed = true;

			}		
		}
		else {
			processBtn.setEnabled(false);
			confirmBtn.setEnabled(false);
			System.out.println("==========");
			System.out.println("currentItemCount: " + MyModel.currentItemNbr);
			System.out.println("Max Count: " + MyModel.maxItems);
			System.out.println("isProcessed: " + MyModel.isProcessed);
		}
		System.out.println("refreshing..");
	}
    
    public void initializeGUI(MyModel model) {
		// Frame
		myFrame = new JFrame();
		myFrame.setBounds(420, 120, 750, 500);
		myFrame.setLocationRelativeTo(null);
		
		MyListeners myListener = new MyListeners();
		
		GUIView.processBtn = new JButton("Process Item #" + MyModel.currentItemNbr);
		processBtn.addActionListener(myListener);
		
		// Buttons
		confirmBtn = new JButton("Confirm Item #" + MyModel.currentItemNbr);
		confirmBtn.addActionListener(myListener);

		confirmBtn.setEnabled(false);
		viewOrderBtn = new JButton("View Order");
		viewOrderBtn.setEnabled(false);
		finishOrderBtn = new JButton("Finish Order");
		finishOrderBtn.setEnabled(false);
		newOrderBtn = new JButton("New Order");
		newOrderBtn.addActionListener(myListener);
		exitBtn = new JButton("Exit");
		
	    JFrame.setDefaultLookAndFeelDecorated(true);
	    nbrItemsLabel = new JLabel("Enter Number of Items For this Order:");
	    bookIDLabel = new JLabel("Enter Book ID for Item #X:");
	    qtyLabel = new JLabel("Enter Quantity for Item #X:");
	    itemInfoLabel = new JLabel("Item #X Info:");
	    itemSubtotalLabel = new JLabel("Subtotal for X items:");
	    
	    nbrItemsTxt = new JTextField("", 30); 
	    bookIDTxt = new JTextField("", 30);
	    qtyTxt = new JTextField("", 30); 
	    itemsInfoTxt = new JTextField("", 30); 
	    itemSubtotalTxt = new JTextField("", 30); 
	    
	    upperPane = new JPanel();
	    inputPane = new JPanel();
	    labelPane = new JPanel();
	    
	    labelPane.add(nbrItemsLabel);
	    labelPane.add(bookIDLabel);
	    labelPane.add(qtyLabel);
	    labelPane.add(itemInfoLabel);
	    labelPane.add(itemSubtotalLabel);
	    
	    inputPane.add(nbrItemsTxt);
	    inputPane.add(bookIDTxt);
	    inputPane.add(qtyTxt);
	    inputPane.add(itemsInfoTxt);
	    inputPane.add(itemSubtotalTxt);

	    inputPane.setLayout(new BoxLayout(inputPane, BoxLayout.Y_AXIS));
	    labelPane.setLayout(new BoxLayout(labelPane, BoxLayout.Y_AXIS));

	    upperPane.add(labelPane);
	    upperPane.add(inputPane);
	    
	    inputPane.setBounds(0, 0, 200, 300);
		
		JPanel lowerGrid = new JPanel(new GridLayout(1,3));
		lowerGrid.add(processBtn);
		
		lowerGrid.add(confirmBtn);
		lowerGrid.add(viewOrderBtn);
		lowerGrid.add(finishOrderBtn);
		lowerGrid.add(newOrderBtn);
		lowerGrid.add(exitBtn);
		

		myFrame.add(upperPane, BorderLayout.NORTH);

		myFrame.add(lowerGrid, BorderLayout.SOUTH);
		myFrame.setVisible(true);
    }
}
